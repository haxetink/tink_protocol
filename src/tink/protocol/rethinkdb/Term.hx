package tink.protocol.rethinkdb;

import haxe.Json;
import haxe.io.Bytes;
import haxe.io.BytesOutput;

using tink.protocol.rethinkdb.Datum;
using tink.CoreApi;

class TermTools {
		
	public static function asString(v:Term):String {
		
		return switch v {
			case null: DNull.asString();
			case TDatum(datum): DatumTools.asString(datum);
			case TMakeArray(args, opt): '[$MAKE_ARRAY,${argsToString(args)}${optToString(opt)}]';
			case TMakeObj(args, opt): '[$MAKE_OBJ,${argsToString(args)}${optToString(opt)}]';
			case TVar(args, opt): '[$VAR,${argsToString(args)}${optToString(opt)}]';
			case TJavascript(args, opt): '[$JAVASCRIPT,${argsToString(args)}${optToString(opt)}]';
			case TUuid(args, opt): '[$UUID,${argsToString(args)}${optToString(opt)}]';
			case THttp(args, opt): '[$HTTP,${argsToString(args)}${optToString(opt)}]';
			case TError(args, opt): '[$ERROR,${argsToString(args)}${optToString(opt)}]';
			case TImplicitVar(args, opt): '[$IMPLICIT_VAR,${argsToString(args)}${optToString(opt)}]';
			case TDb(args, opt): '[$DB,${argsToString(args)}${optToString(opt)}]';
			case TTable(args, opt): '[$TABLE,${argsToString(args)}${optToString(opt)}]';
			case TGet(args, opt): '[$GET,${argsToString(args)}${optToString(opt)}]';
			case TGetAll(args, opt): '[$GET_ALL,${argsToString(args)}${optToString(opt)}]';
			case TEq(args, opt): '[$EQ,${argsToString(args)}${optToString(opt)}]';
			case TNe(args, opt): '[$NE,${argsToString(args)}${optToString(opt)}]';
			case TLt(args, opt): '[$LT,${argsToString(args)}${optToString(opt)}]';
			case TLe(args, opt): '[$LE,${argsToString(args)}${optToString(opt)}]';
			case TGt(args, opt): '[$GT,${argsToString(args)}${optToString(opt)}]';
			case TGe(args, opt): '[$GE,${argsToString(args)}${optToString(opt)}]';
			case TNot(args, opt): '[$NOT,${argsToString(args)}${optToString(opt)}]';
			case TAdd(args, opt): '[$ADD,${argsToString(args)}${optToString(opt)}]';
			case TSub(args, opt): '[$SUB,${argsToString(args)}${optToString(opt)}]';
			case TMul(args, opt): '[$MUL,${argsToString(args)}${optToString(opt)}]';
			case TDiv(args, opt): '[$DIV,${argsToString(args)}${optToString(opt)}]';
			case TMod(args, opt): '[$MOD,${argsToString(args)}${optToString(opt)}]';
			case TFloor(args, opt): '[$FLOOR,${argsToString(args)}${optToString(opt)}]';
			case TCeil(args, opt): '[$CEIL,${argsToString(args)}${optToString(opt)}]';
			case TRound(args, opt): '[$ROUND,${argsToString(args)}${optToString(opt)}]';
			case TAppend(args, opt): '[$APPEND,${argsToString(args)}${optToString(opt)}]';
			case TPrepend(args, opt): '[$PREPEND,${argsToString(args)}${optToString(opt)}]';
			case TDifference(args, opt): '[$DIFFERENCE,${argsToString(args)}${optToString(opt)}]';
			case TSetInsert(args, opt): '[$SET_INSERT,${argsToString(args)}${optToString(opt)}]';
			case TSetIntersection(args, opt): '[$SET_INTERSECTION,${argsToString(args)}${optToString(opt)}]';
			case TSetUnion(args, opt): '[$SET_UNION,${argsToString(args)}${optToString(opt)}]';
			case TSetDifference(args, opt): '[$SET_DIFFERENCE,${argsToString(args)}${optToString(opt)}]';
			case TSlice(args, opt): '[$SLICE,${argsToString(args)}${optToString(opt)}]';
			case TSkip(args, opt): '[$SKIP,${argsToString(args)}${optToString(opt)}]';
			case TLimit(args, opt): '[$LIMIT,${argsToString(args)}${optToString(opt)}]';
			case TOffsetsOf(args, opt): '[$OFFSETS_OF,${argsToString(args)}${optToString(opt)}]';
			case TContains(args, opt): '[$CONTAINS,${argsToString(args)}${optToString(opt)}]';
			case TGetField(args, opt): '[$GET_FIELD,${argsToString(args)}${optToString(opt)}]';
			case TKeys(args, opt): '[$KEYS,${argsToString(args)}${optToString(opt)}]';
			case TValues(args, opt): '[$VALUES,${argsToString(args)}${optToString(opt)}]';
			case TObject(args, opt): '[$OBJECT,${argsToString(args)}${optToString(opt)}]';
			case THasFields(args, opt): '[$HAS_FIELDS,${argsToString(args)}${optToString(opt)}]';
			case TWithFields(args, opt): '[$WITH_FIELDS,${argsToString(args)}${optToString(opt)}]';
			case TPluck(args, opt): '[$PLUCK,${argsToString(args)}${optToString(opt)}]';
			case TWithout(args, opt): '[$WITHOUT,${argsToString(args)}${optToString(opt)}]';
			case TMerge(args, opt): '[$MERGE,${argsToString(args)}${optToString(opt)}]';
			case TBetweenDeprecated(args, opt): '[$BETWEEN_DEPRECATED,${argsToString(args)}${optToString(opt)}]';
			case TBetween(args, opt): '[$BETWEEN,${argsToString(args)}${optToString(opt)}]';
			case TReduce(args, opt): '[$REDUCE,${argsToString(args)}${optToString(opt)}]';
			case TMap(args, opt): '[$MAP,${argsToString(args)}${optToString(opt)}]';
			case TFold(args, opt): '[$FOLD,${argsToString(args)}${optToString(opt)}]';
			case TFilter(args, opt): '[$FILTER,${argsToString(args)}${optToString(opt)}]';
			case TConcatMap(args, opt): '[$CONCAT_MAP,${argsToString(args)}${optToString(opt)}]';
			case TOrderBy(args, opt): '[$ORDER_BY,${argsToString(args)}${optToString(opt)}]';
			case TDistinct(args, opt): '[$DISTINCT,${argsToString(args)}${optToString(opt)}]';
			case TCount(args, opt): '[$COUNT,${argsToString(args)}${optToString(opt)}]';
			case TIsEmpty(args, opt): '[$IS_EMPTY,${argsToString(args)}${optToString(opt)}]';
			case TUnion(args, opt): '[$UNION,${argsToString(args)}${optToString(opt)}]';
			case TNth(args, opt): '[$NTH,${argsToString(args)}${optToString(opt)}]';
			case TBracket(args, opt): '[$BRACKET,${argsToString(args)}${optToString(opt)}]';
			case TInnerJoin(args, opt): '[$INNER_JOIN,${argsToString(args)}${optToString(opt)}]';
			case TOuterJoin(args, opt): '[$OUTER_JOIN,${argsToString(args)}${optToString(opt)}]';
			case TEqJoin(args, opt): '[$EQ_JOIN,${argsToString(args)}${optToString(opt)}]';
			case TZip(args, opt): '[$ZIP,${argsToString(args)}${optToString(opt)}]';
			case TRange(args, opt): '[$RANGE,${argsToString(args)}${optToString(opt)}]';
			case TInsertAt(args, opt): '[$INSERT_AT,${argsToString(args)}${optToString(opt)}]';
			case TDeleteAt(args, opt): '[$DELETE_AT,${argsToString(args)}${optToString(opt)}]';
			case TChangeAt(args, opt): '[$CHANGE_AT,${argsToString(args)}${optToString(opt)}]';
			case TSpliceAt(args, opt): '[$SPLICE_AT,${argsToString(args)}${optToString(opt)}]';
			case TCoerceTo(args, opt): '[$COERCE_TO,${argsToString(args)}${optToString(opt)}]';
			case TTypeOf(args, opt): '[$TYPE_OF,${argsToString(args)}${optToString(opt)}]';
			case TUpdate(args, opt): '[$UPDATE,${argsToString(args)}${optToString(opt)}]';
			case TDelete(args, opt): '[$DELETE,${argsToString(args)}${optToString(opt)}]';
			case TReplace(args, opt): '[$REPLACE,${argsToString(args)}${optToString(opt)}]';
			case TInsert(args, opt): '[$INSERT,${argsToString(args)}${optToString(opt)}]';
			case TDbCreate(args, opt): '[$DB_CREATE,${argsToString(args)}${optToString(opt)}]';
			case TDbDrop(args, opt): '[$DB_DROP,${argsToString(args)}${optToString(opt)}]';
			case TDbList(args, opt): '[$DB_LIST,${argsToString(args)}${optToString(opt)}]';
			case TTableCreate(args, opt): '[$TABLE_CREATE,${argsToString(args)}${optToString(opt)}]';
			case TTableDrop(args, opt): '[$TABLE_DROP,${argsToString(args)}${optToString(opt)}]';
			case TTableList(args, opt): '[$TABLE_LIST,${argsToString(args)}${optToString(opt)}]';
			case TConfig(args, opt): '[$CONFIG,${argsToString(args)}${optToString(opt)}]';
			case TStatus(args, opt): '[$STATUS,${argsToString(args)}${optToString(opt)}]';
			case TWait(args, opt): '[$WAIT,${argsToString(args)}${optToString(opt)}]';
			case TReconfigure(args, opt): '[$RECONFIGURE,${argsToString(args)}${optToString(opt)}]';
			case TRebalance(args, opt): '[$REBALANCE,${argsToString(args)}${optToString(opt)}]';
			case TSync(args, opt): '[$SYNC,${argsToString(args)}${optToString(opt)}]';
			case TGrant(args, opt): '[$GRANT,${argsToString(args)}${optToString(opt)}]';
			case TIndexCreate(args, opt): '[$INDEX_CREATE,${argsToString(args)}${optToString(opt)}]';
			case TIndexDrop(args, opt): '[$INDEX_DROP,${argsToString(args)}${optToString(opt)}]';
			case TIndexList(args, opt): '[$INDEX_LIST,${argsToString(args)}${optToString(opt)}]';
			case TIndexStatus(args, opt): '[$INDEX_STATUS,${argsToString(args)}${optToString(opt)}]';
			case TIndexWait(args, opt): '[$INDEX_WAIT,${argsToString(args)}${optToString(opt)}]';
			case TIndexRename(args, opt): '[$INDEX_RENAME,${argsToString(args)}${optToString(opt)}]';
			case TSetWriteHook(args, opt): '[$SET_WRITE_HOOK,${argsToString(args)}${optToString(opt)}]';
			case TGetWriteHook(args, opt): '[$GET_WRITE_HOOK,${argsToString(args)}${optToString(opt)}]';
			case TFuncall(args, opt): '[$FUNCALL,${argsToString(args)}${optToString(opt)}]';
			case TBranch(args, opt): '[$BRANCH,${argsToString(args)}${optToString(opt)}]';
			case TOr(args, opt): '[$OR,${argsToString(args)}${optToString(opt)}]';
			case TAnd(args, opt): '[$AND,${argsToString(args)}${optToString(opt)}]';
			case TForEach(args, opt): '[$FOR_EACH,${argsToString(args)}${optToString(opt)}]';
			case TFunc(args, opt): '[$FUNC,${argsToString(args)}${optToString(opt)}]';
			case TAsc(args, opt): '[$ASC,${argsToString(args)}${optToString(opt)}]';
			case TDesc(args, opt): '[$DESC,${argsToString(args)}${optToString(opt)}]';
			case TInfo(args, opt): '[$INFO,${argsToString(args)}${optToString(opt)}]';
			case TMatch(args, opt): '[$MATCH,${argsToString(args)}${optToString(opt)}]';
			case TUpcase(args, opt): '[$UPCASE,${argsToString(args)}${optToString(opt)}]';
			case TDowncase(args, opt): '[$DOWNCASE,${argsToString(args)}${optToString(opt)}]';
			case TSample(args, opt): '[$SAMPLE,${argsToString(args)}${optToString(opt)}]';
			case TDefault(args, opt): '[$DEFAULT,${argsToString(args)}${optToString(opt)}]';
			case TJson(args, opt): '[$JSON,${argsToString(args)}${optToString(opt)}]';
			case TToJsonString(args, opt): '[$TO_JSON_STRING,${argsToString(args)}${optToString(opt)}]';
			case TIso8601(args, opt): '[$ISO8601,${argsToString(args)}${optToString(opt)}]';
			case TToIso8601(args, opt): '[$TO_ISO8601,${argsToString(args)}${optToString(opt)}]';
			case TEpochTime(args, opt): '[$EPOCH_TIME,${argsToString(args)}${optToString(opt)}]';
			case TToEpochTime(args, opt): '[$TO_EPOCH_TIME,${argsToString(args)}${optToString(opt)}]';
			case TNow(args, opt): '[$NOW,${argsToString(args)}${optToString(opt)}]';
			case TInTimezone(args, opt): '[$IN_TIMEZONE,${argsToString(args)}${optToString(opt)}]';
			case TDuring(args, opt): '[$DURING,${argsToString(args)}${optToString(opt)}]';
			case TDate(args, opt): '[$DATE,${argsToString(args)}${optToString(opt)}]';
			case TTimeOfDay(args, opt): '[$TIME_OF_DAY,${argsToString(args)}${optToString(opt)}]';
			case TTimezone(args, opt): '[$TIMEZONE,${argsToString(args)}${optToString(opt)}]';
			case TYear(args, opt): '[$YEAR,${argsToString(args)}${optToString(opt)}]';
			case TMonth(args, opt): '[$MONTH,${argsToString(args)}${optToString(opt)}]';
			case TDay(args, opt): '[$DAY,${argsToString(args)}${optToString(opt)}]';
			case TDayOfWeek(args, opt): '[$DAY_OF_WEEK,${argsToString(args)}${optToString(opt)}]';
			case TDayOfYear(args, opt): '[$DAY_OF_YEAR,${argsToString(args)}${optToString(opt)}]';
			case THours(args, opt): '[$HOURS,${argsToString(args)}${optToString(opt)}]';
			case TMinutes(args, opt): '[$MINUTES,${argsToString(args)}${optToString(opt)}]';
			case TSeconds(args, opt): '[$SECONDS,${argsToString(args)}${optToString(opt)}]';
			case TTime(args, opt): '[$TIME,${argsToString(args)}${optToString(opt)}]';
			case TMonday(args, opt): '[$MONDAY,${argsToString(args)}${optToString(opt)}]';
			case TTuesday(args, opt): '[$TUESDAY,${argsToString(args)}${optToString(opt)}]';
			case TWednesday(args, opt): '[$WEDNESDAY,${argsToString(args)}${optToString(opt)}]';
			case TThursday(args, opt): '[$THURSDAY,${argsToString(args)}${optToString(opt)}]';
			case TFriday(args, opt): '[$FRIDAY,${argsToString(args)}${optToString(opt)}]';
			case TSaturday(args, opt): '[$SATURDAY,${argsToString(args)}${optToString(opt)}]';
			case TSunday(args, opt): '[$SUNDAY,${argsToString(args)}${optToString(opt)}]';
			case TJanuary(args, opt): '[$JANUARY,${argsToString(args)}${optToString(opt)}]';
			case TFebruary(args, opt): '[$FEBRUARY,${argsToString(args)}${optToString(opt)}]';
			case TMarch(args, opt): '[$MARCH,${argsToString(args)}${optToString(opt)}]';
			case TApril(args, opt): '[$APRIL,${argsToString(args)}${optToString(opt)}]';
			case TMay(args, opt): '[$MAY,${argsToString(args)}${optToString(opt)}]';
			case TJune(args, opt): '[$JUNE,${argsToString(args)}${optToString(opt)}]';
			case TJuly(args, opt): '[$JULY,${argsToString(args)}${optToString(opt)}]';
			case TAugust(args, opt): '[$AUGUST,${argsToString(args)}${optToString(opt)}]';
			case TSeptember(args, opt): '[$SEPTEMBER,${argsToString(args)}${optToString(opt)}]';
			case TOctober(args, opt): '[$OCTOBER,${argsToString(args)}${optToString(opt)}]';
			case TNovember(args, opt): '[$NOVEMBER,${argsToString(args)}${optToString(opt)}]';
			case TDecember(args, opt): '[$DECEMBER,${argsToString(args)}${optToString(opt)}]';
			case TLiteral(args, opt): '[$LITERAL,${argsToString(args)}${optToString(opt)}]';
			case TGroup(args, opt): '[$GROUP,${argsToString(args)}${optToString(opt)}]';
			case TSum(args, opt): '[$SUM,${argsToString(args)}${optToString(opt)}]';
			case TAvg(args, opt): '[$AVG,${argsToString(args)}${optToString(opt)}]';
			case TMin(args, opt): '[$MIN,${argsToString(args)}${optToString(opt)}]';
			case TMax(args, opt): '[$MAX,${argsToString(args)}${optToString(opt)}]';
			case TSplit(args, opt): '[$SPLIT,${argsToString(args)}${optToString(opt)}]';
			case TUngroup(args, opt): '[$UNGROUP,${argsToString(args)}${optToString(opt)}]';
			case TRandom(args, opt): '[$RANDOM,${argsToString(args)}${optToString(opt)}]';
			case TChanges(args, opt): '[$CHANGES,${argsToString(args)}${optToString(opt)}]';
			case TArgs(args, opt): '[$ARGS,${argsToString(args)}${optToString(opt)}]';
			case TBinary(args, opt): '[$BINARY,${argsToString(args)}${optToString(opt)}]';
			case TGeojson(args, opt): '[$GEOJSON,${argsToString(args)}${optToString(opt)}]';
			case TToGeojson(args, opt): '[$TO_GEOJSON,${argsToString(args)}${optToString(opt)}]';
			case TPoint(args, opt): '[$POINT,${argsToString(args)}${optToString(opt)}]';
			case TLine(args, opt): '[$LINE,${argsToString(args)}${optToString(opt)}]';
			case TPolygon(args, opt): '[$POLYGON,${argsToString(args)}${optToString(opt)}]';
			case TDistance(args, opt): '[$DISTANCE,${argsToString(args)}${optToString(opt)}]';
			case TIntersects(args, opt): '[$INTERSECTS,${argsToString(args)}${optToString(opt)}]';
			case TIncludes(args, opt): '[$INCLUDES,${argsToString(args)}${optToString(opt)}]';
			case TCircle(args, opt): '[$CIRCLE,${argsToString(args)}${optToString(opt)}]';
			case TGetIntersecting(args, opt): '[$GET_INTERSECTING,${argsToString(args)}${optToString(opt)}]';
			case TFill(args, opt): '[$FILL,${argsToString(args)}${optToString(opt)}]';
			case TGetNearest(args, opt): '[$GET_NEAREST,${argsToString(args)}${optToString(opt)}]';
			case TPolygonSub(args, opt): '[$POLYGON_SUB,${argsToString(args)}${optToString(opt)}]';
			case TMinval(args, opt): '[$MINVAL,${argsToString(args)}${optToString(opt)}]';
			case TMaxval(args, opt): '[$MAXVAL,${argsToString(args)}${optToString(opt)}]';
		}
	}
	
	static function optToString(v:Array<Named<Term>>)
		return v == null ? '' : ',{' + [for(o in v) '"${o.name}":${asString(o.value)}'].join(',') + '}';
			
	static function argsToString(v:Array<Term>):String
		return '[' + [for(i in v) asString(i)].join(',') + ']';
	
}

@:enum
abstract TermType(Int) from Int {
	var DATUM = 1;
	var MAKE_ARRAY = 2;
	var MAKE_OBJ = 3;
	var VAR = 10;
	var JAVASCRIPT = 11;
	var UUID = 169;
	var HTTP = 153;
	var ERROR = 12;
	var IMPLICIT_VAR = 13;
	var DB = 14;
	var TABLE = 15;
	var GET = 16;
	var GET_ALL = 78;
	var EQ = 17;
	var NE = 18;
	var LT = 19;
	var LE = 20;
	var GT = 21;
	var GE = 22;
	var NOT = 23;
	var ADD = 24;
	var SUB = 25;
	var MUL = 26;
	var DIV = 27;
	var MOD = 28;
	var FLOOR = 183;
	var CEIL = 184;
	var ROUND = 185;
	var APPEND = 29;
	var PREPEND = 80;
	var DIFFERENCE = 95;
	var SET_INSERT = 88;
	var SET_INTERSECTION = 89;
	var SET_UNION = 90;
	var SET_DIFFERENCE = 91;
	var SLICE = 30;
	var SKIP = 70;
	var LIMIT = 71;
	var OFFSETS_OF = 87;
	var CONTAINS = 93;
	var GET_FIELD = 31;
	var KEYS = 94;
	var VALUES = 186;
	var OBJECT = 143;
	var HAS_FIELDS = 32;
	var WITH_FIELDS = 96;
	var PLUCK = 33;
	var WITHOUT = 34;
	var MERGE = 35;
	var BETWEEN_DEPRECATED = 36;
	var BETWEEN = 182;
	var REDUCE = 37;
	var MAP = 38;
	var FOLD = 187;
	var FILTER = 39;
	var CONCAT_MAP = 40;
	var ORDER_BY = 41;
	var DISTINCT = 42;
	var COUNT = 43;
	var IS_EMPTY = 86;
	var UNION = 44;
	var NTH = 45;
	var BRACKET = 170;
	var INNER_JOIN = 48;
	var OUTER_JOIN = 49;
	var EQ_JOIN = 50;
	var ZIP = 72;
	var RANGE = 173;
	var INSERT_AT = 82;
	var DELETE_AT = 83;
	var CHANGE_AT = 84;
	var SPLICE_AT = 85;
	var COERCE_TO = 51;
	var TYPE_OF = 52;
	var UPDATE = 53;
	var DELETE = 54;
	var REPLACE = 55;
	var INSERT = 56;
	var DB_CREATE = 57;
	var DB_DROP = 58;
	var DB_LIST = 59;
	var TABLE_CREATE = 60;
	var TABLE_DROP = 61;
	var TABLE_LIST = 62;
	var CONFIG = 174;
	var STATUS = 175;
	var WAIT = 177;
	var RECONFIGURE = 176;
	var REBALANCE = 179;
	var SYNC = 138;
	var GRANT = 188;
	var INDEX_CREATE = 75;
	var INDEX_DROP = 76;
	var INDEX_LIST = 77;
	var INDEX_STATUS = 139;
	var INDEX_WAIT = 140;
	var INDEX_RENAME = 156;
	var SET_WRITE_HOOK = 189;
	var GET_WRITE_HOOK = 190;
	var FUNCALL = 64;
	var BRANCH = 65;
	var OR = 66;
	var AND = 67;
	var FOR_EACH = 68;
	var FUNC = 69;
	var ASC = 73;
	var DESC = 74;
	var INFO = 79;
	var MATCH = 97;
	var UPCASE = 141;
	var DOWNCASE = 142;
	var SAMPLE = 81;
	var DEFAULT = 92;
	var JSON = 98;
	var TO_JSON_STRING = 172;
	var ISO8601 = 99;
	var TO_ISO8601 = 100;
	var EPOCH_TIME = 101;
	var TO_EPOCH_TIME = 102;
	var NOW = 103;
	var IN_TIMEZONE = 104;
	var DURING = 105;
	var DATE = 106;
	var TIME_OF_DAY = 126;
	var TIMEZONE = 127;
	var YEAR = 128;
	var MONTH = 129;
	var DAY = 130;
	var DAY_OF_WEEK = 131;
	var DAY_OF_YEAR = 132;
	var HOURS = 133;
	var MINUTES = 134;
	var SECONDS = 135;
	var TIME = 136;
	var MONDAY = 107;
	var TUESDAY = 108;
	var WEDNESDAY = 109;
	var THURSDAY = 110;
	var FRIDAY = 111;
	var SATURDAY = 112;
	var SUNDAY = 113;
	var JANUARY = 114;
	var FEBRUARY = 115;
	var MARCH = 116;
	var APRIL = 117;
	var MAY = 118;
	var JUNE = 119;
	var JULY = 120;
	var AUGUST = 121;
	var SEPTEMBER = 122;
	var OCTOBER = 123;
	var NOVEMBER = 124;
	var DECEMBER = 125;
	var LITERAL = 137;
	var GROUP = 144;
	var SUM = 145;
	var AVG = 146;
	var MIN = 147;
	var MAX = 148;
	var SPLIT = 149;
	var UNGROUP = 150;
	var RANDOM = 151;
	var CHANGES = 152;
	var ARGS = 154;
	var BINARY = 155;
	var GEOJSON = 157;
	var TO_GEOJSON = 158;
	var POINT = 159;
	var LINE = 160;
	var POLYGON = 161;
	var DISTANCE = 162;
	var INTERSECTS = 163;
	var INCLUDES = 164;
	var CIRCLE = 165;
	var GET_INTERSECTING = 166;
	var FILL = 167;
	var GET_NEAREST = 168;
	var POLYGON_SUB = 171;
	var MINVAL = 180;
	var MAXVAL = 181;
}

enum Term {
	TDatum(datum:Datum);
	TMakeArray(args:Array<Term>, ?options:Array<Named<Term>>);
	TMakeObj(args:Array<Term>, ?options:Array<Named<Term>>);
	TVar(args:Array<Term>, ?options:Array<Named<Term>>);
	TJavascript(args:Array<Term>, ?options:Array<Named<Term>>);
	TUuid(args:Array<Term>, ?options:Array<Named<Term>>);
	THttp(args:Array<Term>, ?options:Array<Named<Term>>);
	TError(args:Array<Term>, ?options:Array<Named<Term>>);
	TImplicitVar(args:Array<Term>, ?options:Array<Named<Term>>);
	TDb(args:Array<Term>, ?options:Array<Named<Term>>);
	TTable(args:Array<Term>, ?options:Array<Named<Term>>);
	TGet(args:Array<Term>, ?options:Array<Named<Term>>);
	TGetAll(args:Array<Term>, ?options:Array<Named<Term>>);
	TEq(args:Array<Term>, ?options:Array<Named<Term>>);
	TNe(args:Array<Term>, ?options:Array<Named<Term>>);
	TLt(args:Array<Term>, ?options:Array<Named<Term>>);
	TLe(args:Array<Term>, ?options:Array<Named<Term>>);
	TGt(args:Array<Term>, ?options:Array<Named<Term>>);
	TGe(args:Array<Term>, ?options:Array<Named<Term>>);
	TNot(args:Array<Term>, ?options:Array<Named<Term>>);
	TAdd(args:Array<Term>, ?options:Array<Named<Term>>);
	TSub(args:Array<Term>, ?options:Array<Named<Term>>);
	TMul(args:Array<Term>, ?options:Array<Named<Term>>);
	TDiv(args:Array<Term>, ?options:Array<Named<Term>>);
	TMod(args:Array<Term>, ?options:Array<Named<Term>>);
	TFloor(args:Array<Term>, ?options:Array<Named<Term>>);
	TCeil(args:Array<Term>, ?options:Array<Named<Term>>);
	TRound(args:Array<Term>, ?options:Array<Named<Term>>);
	TAppend(args:Array<Term>, ?options:Array<Named<Term>>);
	TPrepend(args:Array<Term>, ?options:Array<Named<Term>>);
	TDifference(args:Array<Term>, ?options:Array<Named<Term>>);
	TSetInsert(args:Array<Term>, ?options:Array<Named<Term>>);
	TSetIntersection(args:Array<Term>, ?options:Array<Named<Term>>);
	TSetUnion(args:Array<Term>, ?options:Array<Named<Term>>);
	TSetDifference(args:Array<Term>, ?options:Array<Named<Term>>);
	TSlice(args:Array<Term>, ?options:Array<Named<Term>>);
	TSkip(args:Array<Term>, ?options:Array<Named<Term>>);
	TLimit(args:Array<Term>, ?options:Array<Named<Term>>);
	TOffsetsOf(args:Array<Term>, ?options:Array<Named<Term>>);
	TContains(args:Array<Term>, ?options:Array<Named<Term>>);
	TGetField(args:Array<Term>, ?options:Array<Named<Term>>);
	TKeys(args:Array<Term>, ?options:Array<Named<Term>>);
	TValues(args:Array<Term>, ?options:Array<Named<Term>>);
	TObject(args:Array<Term>, ?options:Array<Named<Term>>);
	THasFields(args:Array<Term>, ?options:Array<Named<Term>>);
	TWithFields(args:Array<Term>, ?options:Array<Named<Term>>);
	TPluck(args:Array<Term>, ?options:Array<Named<Term>>);
	TWithout(args:Array<Term>, ?options:Array<Named<Term>>);
	TMerge(args:Array<Term>, ?options:Array<Named<Term>>);
	TBetweenDeprecated(args:Array<Term>, ?options:Array<Named<Term>>);
	TBetween(args:Array<Term>, ?options:Array<Named<Term>>);
	TReduce(args:Array<Term>, ?options:Array<Named<Term>>);
	TMap(args:Array<Term>, ?options:Array<Named<Term>>);
	TFold(args:Array<Term>, ?options:Array<Named<Term>>);
	TFilter(args:Array<Term>, ?options:Array<Named<Term>>);
	TConcatMap(args:Array<Term>, ?options:Array<Named<Term>>);
	TOrderBy(args:Array<Term>, ?options:Array<Named<Term>>);
	TDistinct(args:Array<Term>, ?options:Array<Named<Term>>);
	TCount(args:Array<Term>, ?options:Array<Named<Term>>);
	TIsEmpty(args:Array<Term>, ?options:Array<Named<Term>>);
	TUnion(args:Array<Term>, ?options:Array<Named<Term>>);
	TNth(args:Array<Term>, ?options:Array<Named<Term>>);
	TBracket(args:Array<Term>, ?options:Array<Named<Term>>);
	TInnerJoin(args:Array<Term>, ?options:Array<Named<Term>>);
	TOuterJoin(args:Array<Term>, ?options:Array<Named<Term>>);
	TEqJoin(args:Array<Term>, ?options:Array<Named<Term>>);
	TZip(args:Array<Term>, ?options:Array<Named<Term>>);
	TRange(args:Array<Term>, ?options:Array<Named<Term>>);
	TInsertAt(args:Array<Term>, ?options:Array<Named<Term>>);
	TDeleteAt(args:Array<Term>, ?options:Array<Named<Term>>);
	TChangeAt(args:Array<Term>, ?options:Array<Named<Term>>);
	TSpliceAt(args:Array<Term>, ?options:Array<Named<Term>>);
	TCoerceTo(args:Array<Term>, ?options:Array<Named<Term>>);
	TTypeOf(args:Array<Term>, ?options:Array<Named<Term>>);
	TUpdate(args:Array<Term>, ?options:Array<Named<Term>>);
	TDelete(args:Array<Term>, ?options:Array<Named<Term>>);
	TReplace(args:Array<Term>, ?options:Array<Named<Term>>);
	TInsert(args:Array<Term>, ?options:Array<Named<Term>>);
	TDbCreate(args:Array<Term>, ?options:Array<Named<Term>>);
	TDbDrop(args:Array<Term>, ?options:Array<Named<Term>>);
	TDbList(args:Array<Term>, ?options:Array<Named<Term>>);
	TTableCreate(args:Array<Term>, ?options:Array<Named<Term>>);
	TTableDrop(args:Array<Term>, ?options:Array<Named<Term>>);
	TTableList(args:Array<Term>, ?options:Array<Named<Term>>);
	TConfig(args:Array<Term>, ?options:Array<Named<Term>>);
	TStatus(args:Array<Term>, ?options:Array<Named<Term>>);
	TWait(args:Array<Term>, ?options:Array<Named<Term>>);
	TReconfigure(args:Array<Term>, ?options:Array<Named<Term>>);
	TRebalance(args:Array<Term>, ?options:Array<Named<Term>>);
	TSync(args:Array<Term>, ?options:Array<Named<Term>>);
	TGrant(args:Array<Term>, ?options:Array<Named<Term>>);
	TIndexCreate(args:Array<Term>, ?options:Array<Named<Term>>);
	TIndexDrop(args:Array<Term>, ?options:Array<Named<Term>>);
	TIndexList(args:Array<Term>, ?options:Array<Named<Term>>);
	TIndexStatus(args:Array<Term>, ?options:Array<Named<Term>>);
	TIndexWait(args:Array<Term>, ?options:Array<Named<Term>>);
	TIndexRename(args:Array<Term>, ?options:Array<Named<Term>>);
	TSetWriteHook(args:Array<Term>, ?options:Array<Named<Term>>);
	TGetWriteHook(args:Array<Term>, ?options:Array<Named<Term>>);
	TFuncall(args:Array<Term>, ?options:Array<Named<Term>>);
	TBranch(args:Array<Term>, ?options:Array<Named<Term>>);
	TOr(args:Array<Term>, ?options:Array<Named<Term>>);
	TAnd(args:Array<Term>, ?options:Array<Named<Term>>);
	TForEach(args:Array<Term>, ?options:Array<Named<Term>>);
	TFunc(args:Array<Term>, ?options:Array<Named<Term>>);
	TAsc(args:Array<Term>, ?options:Array<Named<Term>>);
	TDesc(args:Array<Term>, ?options:Array<Named<Term>>);
	TInfo(args:Array<Term>, ?options:Array<Named<Term>>);
	TMatch(args:Array<Term>, ?options:Array<Named<Term>>);
	TUpcase(args:Array<Term>, ?options:Array<Named<Term>>);
	TDowncase(args:Array<Term>, ?options:Array<Named<Term>>);
	TSample(args:Array<Term>, ?options:Array<Named<Term>>);
	TDefault(args:Array<Term>, ?options:Array<Named<Term>>);
	TJson(args:Array<Term>, ?options:Array<Named<Term>>);
	TToJsonString(args:Array<Term>, ?options:Array<Named<Term>>);
	TIso8601(args:Array<Term>, ?options:Array<Named<Term>>);
	TToIso8601(args:Array<Term>, ?options:Array<Named<Term>>);
	TEpochTime(args:Array<Term>, ?options:Array<Named<Term>>);
	TToEpochTime(args:Array<Term>, ?options:Array<Named<Term>>);
	TNow(args:Array<Term>, ?options:Array<Named<Term>>);
	TInTimezone(args:Array<Term>, ?options:Array<Named<Term>>);
	TDuring(args:Array<Term>, ?options:Array<Named<Term>>);
	TDate(args:Array<Term>, ?options:Array<Named<Term>>);
	TTimeOfDay(args:Array<Term>, ?options:Array<Named<Term>>);
	TTimezone(args:Array<Term>, ?options:Array<Named<Term>>);
	TYear(args:Array<Term>, ?options:Array<Named<Term>>);
	TMonth(args:Array<Term>, ?options:Array<Named<Term>>);
	TDay(args:Array<Term>, ?options:Array<Named<Term>>);
	TDayOfWeek(args:Array<Term>, ?options:Array<Named<Term>>);
	TDayOfYear(args:Array<Term>, ?options:Array<Named<Term>>);
	THours(args:Array<Term>, ?options:Array<Named<Term>>);
	TMinutes(args:Array<Term>, ?options:Array<Named<Term>>);
	TSeconds(args:Array<Term>, ?options:Array<Named<Term>>);
	TTime(args:Array<Term>, ?options:Array<Named<Term>>);
	TMonday(args:Array<Term>, ?options:Array<Named<Term>>);
	TTuesday(args:Array<Term>, ?options:Array<Named<Term>>);
	TWednesday(args:Array<Term>, ?options:Array<Named<Term>>);
	TThursday(args:Array<Term>, ?options:Array<Named<Term>>);
	TFriday(args:Array<Term>, ?options:Array<Named<Term>>);
	TSaturday(args:Array<Term>, ?options:Array<Named<Term>>);
	TSunday(args:Array<Term>, ?options:Array<Named<Term>>);
	TJanuary(args:Array<Term>, ?options:Array<Named<Term>>);
	TFebruary(args:Array<Term>, ?options:Array<Named<Term>>);
	TMarch(args:Array<Term>, ?options:Array<Named<Term>>);
	TApril(args:Array<Term>, ?options:Array<Named<Term>>);
	TMay(args:Array<Term>, ?options:Array<Named<Term>>);
	TJune(args:Array<Term>, ?options:Array<Named<Term>>);
	TJuly(args:Array<Term>, ?options:Array<Named<Term>>);
	TAugust(args:Array<Term>, ?options:Array<Named<Term>>);
	TSeptember(args:Array<Term>, ?options:Array<Named<Term>>);
	TOctober(args:Array<Term>, ?options:Array<Named<Term>>);
	TNovember(args:Array<Term>, ?options:Array<Named<Term>>);
	TDecember(args:Array<Term>, ?options:Array<Named<Term>>);
	TLiteral(args:Array<Term>, ?options:Array<Named<Term>>);
	TGroup(args:Array<Term>, ?options:Array<Named<Term>>);
	TSum(args:Array<Term>, ?options:Array<Named<Term>>);
	TAvg(args:Array<Term>, ?options:Array<Named<Term>>);
	TMin(args:Array<Term>, ?options:Array<Named<Term>>);
	TMax(args:Array<Term>, ?options:Array<Named<Term>>);
	TSplit(args:Array<Term>, ?options:Array<Named<Term>>);
	TUngroup(args:Array<Term>, ?options:Array<Named<Term>>);
	TRandom(args:Array<Term>, ?options:Array<Named<Term>>);
	TChanges(args:Array<Term>, ?options:Array<Named<Term>>);
	TArgs(args:Array<Term>, ?options:Array<Named<Term>>);
	TBinary(args:Array<Term>, ?options:Array<Named<Term>>);
	TGeojson(args:Array<Term>, ?options:Array<Named<Term>>);
	TToGeojson(args:Array<Term>, ?options:Array<Named<Term>>);
	TPoint(args:Array<Term>, ?options:Array<Named<Term>>);
	TLine(args:Array<Term>, ?options:Array<Named<Term>>);
	TPolygon(args:Array<Term>, ?options:Array<Named<Term>>);
	TDistance(args:Array<Term>, ?options:Array<Named<Term>>);
	TIntersects(args:Array<Term>, ?options:Array<Named<Term>>);
	TIncludes(args:Array<Term>, ?options:Array<Named<Term>>);
	TCircle(args:Array<Term>, ?options:Array<Named<Term>>);
	TGetIntersecting(args:Array<Term>, ?options:Array<Named<Term>>);
	TFill(args:Array<Term>, ?options:Array<Named<Term>>);
	TGetNearest(args:Array<Term>, ?options:Array<Named<Term>>);
	TPolygonSub(args:Array<Term>, ?options:Array<Named<Term>>);
	TMinval(args:Array<Term>, ?options:Array<Named<Term>>);
	TMaxval(args:Array<Term>, ?options:Array<Named<Term>>);
}